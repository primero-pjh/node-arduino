var app = require('../app');
var debug = require('debug')('dev:server');
var http = require('http');

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
console.log(port);

var moment = require('moment');
require('moment-timezone');
moment.tz.setDefault("Asia/Seoul");
const { SerialPort } = require('serialport');
const { ReadlineParser } = require('@serialport/parser-readline');
const timer = require('node-schedule');
var t_dict = new Object();
// const alarm = require('node-schedule');
var a_dict = new Object();

const sp = new SerialPort({
	path: 'COM3',
	baudRate: 9600,
	autoOpen: false,
});

const parser = sp.pipe(new ReadlineParser({ delimiter: '\r\n' }));

sp.open(function (err) {
	if (err) {
	  return console.log('Error opening port: ', err.message)
	}
  });
  
  // The open event is always emitted
  sp.on('open', function() {
	// open logic
  })

var server = http.createServer(app);
var io = require('socket.io')(server);
var socket = new Object();
// var user_list = new Array();
var user_dict = new Object();
var is_read = false;

io.on('connection' , function(_socket) { 
	console.log('_socket:', _socket.id);
	_socket.emit('Connection', {
		value: "반갑습니다."
	});

	_socket.on('timer', function(time) {
		if(!time) {
			_socket.emit('failMessage', '값이 입력되지 않았습니다.');	
			return;
		}
		for(var k in t_dict) {
			var my_job = timer.scheduledJobs[k];
			my_job.cancel();
			delete t_list[k];
		}
		// 온습도 켜지는 코드
		var min = time.split(":")[0];
		var sec = time.split(":")[1];
		var today = moment();
		console.log(today);
		// today.setSeconds(today.getSeconds() + parseInt(sec));
		// today.setMinutes(today.getMinutes() + parseInt(min));
		today.add(parseInt(min), 'm');
		today.add(parseInt(sec), 's');
		console.log("today:", today);
		var date = today.format("YYYY-MM-DDTHH:mm:ss");
		date = new Date(date);
		console.log(date);

		var id = Object.keys(t_dict).length;
		var j = timer.scheduleJob(toString(id), date, function() {
			console.log("node 스케쥴 테스트");
			delete t_dict[id];
		});
		t_dict[id] = true;
	});

	_socket.on('alarm', function(obj) {
		var startDate = obj["startDate"];
		var endDate = obj["endDate"];
		console.log("startDate:", startDate);
		console.log("endDate:", endDate);
		var today = moment().format('YYYY-MM-DD');

		var m_sd = moment(today + "T" + startDate);
		var m_ed = moment(today + "T" + endDate);
		console.log(m_sd);
		console.log(m_ed);

		var s_date = new Date(m_sd.format('YYYY-MM-DDTHH:mm:ss'));
		console.log("s_date:", s_date);
		var e_date = new Date(m_ed.format('YYYY-MM-DDTHH:mm:ss'));
		var id = Object.keys(a_dict).length;
		console.log(id);
		timer.scheduleJob(toString(id), s_date, function() {
			console.log("node 스케쥴 테스트");
		});
		a_dict[id] = true;
		// id = Object.keys(a_dict).length;
		// var q = alarm.scheduleJob(id, e_date, function() {
		// 	console.log("e_date");
		// });
		// a_dict[id] = true;
		console.log("a_dict:", a_dict);
		// console.log("today:", today);
	})
	
	
	module.exports = { socket, user_dict, io };
	// 각 formUser에 socket_id 를 저장
	// _socket.on("Connection", function(data) {
	
	// 사용자가 로그아웃, 튕김, 페이지나감에 대한 disconnect event
	_socket.on('disconnect', function(data) {
		console.log("연결끊김");
	});

	_socket.on("message", function(data) {
		console.log(data);
	});
	_socket.on("is_read", function(data) {
		console.log("data:", data);
		is_read = true;
	});
	

	_socket.on("send_decimal", function(data) {
		console.log("data:", data);
		sp.write(String(data));
	})

	parser.on("data", ((str) => {
		// io.emit("data_receive", data);
		if(is_read) {
			var arr = str.split(" ");
			var t = arr[0].split("=")[1];
			var h = arr[1].split("=")[1];
			console.log("data:", str);
			_socket.emit("receive_dht", {
				t: t,
				h: h,
			});
		}
	}));
});
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}